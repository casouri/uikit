#+TITLE: Note

* segue do list
  
- Create the scene instance if doesn't exist

- Push current scene to =uikit-scene-ring= for coming back.
  
- call =uikit-open= on the new scene.
  
- Set uikit-buffer-scene
  
* How does an app open

An app is initialized by =open-xxx= command created by =uikit-define-app= macro.
In initialization, the app initialize the entry scene, then segue to it.

* Scene

A scene is a "page". It is a special stack.

You can conveniently define a scene with =uikit-define-scene=.

* How does a scene open

Segue open the scene by =(uikit-open scene)=, and the setup is done by that method.

- create a buffer if non exist, set it to =buffer= slot.

- set buffer local variable =uikit-buffer-scene=.
  
- draws the scene with =uikit-draw=.

* How does a scene / stack draw
  
A scene is no more than a special stack, so a scene draws just like a stack view.

** Be asked to draw

segue (=uikit-segue=) will ask the scene to draw.
The scene will create a buffer if it doesn't have one.

** Make content

- Aske subviews to make their content and set their width and height information.

- Arrange subviews by =constrain-list=.

- Then set width and height of stack by finding largest =y+height= and =x+width=.

** Ask subviews to draw


* How does a view draw
  
=uikit-draw= of view takes a position.
  
** Get content

Get content by =uikit-make-content=

*Make content process*

This function calculates content and sets width and height.
  
*** uikit-make-content

This function is the main function. Each different views has different implementations.
At the end, it should return a list of strings, each stirng is a line.
Each subclass is responsible of making sure each line has same length.

*** uikit-make-content :around
The parent class of all views =uikit-view= has an =:around= method
that sets content cache (=content= slot) to the content calculated.

This function only make content when content cached is outdated (=content-changed= slot t)
It then resets =content-changed=.

Then set =width= and =height= slot for cache.
=width= is calculated by the first line's length.

** inhibit modification

=inhibit-modification-hooks= is set to t,
so some hooks that uikit uses to alter user input doesn't run.

Finally the content is drew with =uikit-draw=, a function rather than a method.

* View
- text propertyies are added automatically in =uikit-make-content=.
  

* Tag system

Each view have an id. An id can also point to a list of views. 
You can get the view by id with =uikit-id-view=.
Many uikit functions takes id as an argument.

* Button


** Button function
The easiest way is to overload =uikit-invoke-button= function (with =eql=),
which binds to mouse1/2/3/ and RET on button. For more control,
define your function and bind it in button's keymap.

* Subclassing

Don't overload =initialize-instance= function of view classes directly.
If you need to control the initialization, create a subclass.
* View
  
** Slots

- face
- pad-char
- constrain
- keymap
- property-list
- content
- padded-content
- content-changed

** Subclass
   
*Functions need to implement:*

- uikit-report-width
- uikit-report-height
- uikit-make-content

* TO-DO list
** TODO Add user-configured constrains
** TODO Fix table edit button
** TODO fix subview-list implementation for table
** TODO after edit hook -> change text
** DONE clickable class
** TODO cache for =max-subview-height=
** TODO add last position of view and don't draw if position didn't change.
** TODO clear constrain cache before drawing
** DONE How to clean drawing cache after drawing?
When content changed?
** DONE Revise caching in drawing process
- keep pos
- keep width & height

- width & height changed: new content

** TODO (MAYBE) add checking in drawing process
** DONE drawing process
Take width and height into account
** DONE fix append/push
** DONE revise =pos-of=
** TODO set =inhibit-modification-hooks= when drawing
** TODO Replace =uikit-make-content= to =uikit-updatecontent=
** TODO disable undo when drawing
** DONE uikit-draw pos-of view
** TODO uikit-quit
** TODO uikit launch pad
** DONE logging
   
* Benchmark

#+BEGIN_SRC
(benchmark-run 100000 (goto-line 10))
(7.9963120000000005 3 0.12082300000000012)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq mypos (make-uikit-pos :x 20 :y 10))
(setq mylabel (make-instance 'uikit-label :id 'label :text "hhhhhhhhhhhhhhhhhhhhhhhhhh\nhhhhhhhhhhhhhhhhhhhhhhhhhh\nhhhhhhhhhhhhhhhhhhhhhhhhhh\nhhhhhhhhhhhhhhhhhhhhhhhhhh"))
(benchmar-run 1000 (uikit-draw mylabel mypos))
(0.15087099999999998 1 0.08625299999999925)
;; compare to:
(benchmark-run 1000 (insert "a"))
(0.177493 1 0.12036200000000008)
(0.146757 0 0.0)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun uikit-test-autolayout-equal-spacing ()
  "Test autolayout."
  (interactive)
  (make-instance 'uikit-button :id "mybutton1")
  (make-instance 'uikit-button :id "mybutton2")
  (make-instance 'uikit-button :id "mybutton3")
  (make-instance 'uikit-stackview :id "mystack")
  (uikit-left-of uikit//mystack 20)
  (uikit-top-of uikit//mystack 10)
  (uikit-right-of uikit//mystack 60)
  (setf (uikit--subview-list-of uikit//mystack) (list uikit//mybutton1 uikit//mybutton2 uikit//mybutton3))
  (setf (uikit--autolayout-of uikit//mystack) 'equal-spacing)
  (let ((lexical-binding t))
    (uikit-test-prepare-canvas)
    (print (benchmark-run 1000 (uikit-autolayout uikit//mystack)))
    (print (benchmark-run 1000 (uikit-draw uikit//mystack)))))

(0.108511 1 0.07836700000000008)
(0.228055 1 0.07802699999999874)
#+END_SRC

* File Structure
- Cutomize
- Variable
- Base Structs
- Base Functions
- Base Classes
- Subclasses
- Debug Helper

In each class:

- Class :: class definition, init function, slot getter/setter
- Methods :: functions

* Questions to ask
- pos用con还是用struct
- 关于push和append的问题
- id用string还是symbol
- :after :around是好选择吗？
